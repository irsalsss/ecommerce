services:
  postgres:
    image: postgres:15
    container_name: ecommerce-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ecommerce_db
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ecommerce_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ecommerce_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_prod_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
      target: production
    container_name: ecommerce-backend-prod
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      DATABASE_URL: "postgresql://postgres:${POSTGRES_PASSWORD:-ecommerce_password}@postgres:5432/ecommerce_db"
      REDIS_URL: "redis://redis:6379"
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-here}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      NODE_ENV: "production"
      PORT: 3001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

volumes:
  postgres_prod_data:
  redis_prod_data:
